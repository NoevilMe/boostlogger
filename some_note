
void add_file_logging(const std::string &log_dir, logging::trivial::severity_level level);
void add_file_logging(const std::string &log_dir, logging::trivial::severity_level level)
{
	// https://blog.csdn.net/csfreebird/article/details/17631021
	// 要使用旋转日志，backend要换成text_file_backen，而不是text_ostream_backend

	/*typedef sinks::synchronous_sink< sinks::text_ostream_backend > text_sink;*/
	//boost::shared_ptr< text_sink > sink = boost::make_shared< text_sink >();
	//sink->locked_backend()->add_stream(
			//boost::make_shared< std::ofstream >("sign.log"));
	//sink->set_formatter (
			//expr::format("[%1%]<%2%>(%3%): %4%")
			//% expr::format_date_time< boost::posix_time::ptime >("TimeStamp", "%Y-%m-%d %H:%M:%S")
			//% logging::trivial::severity
			//% expr::attr<boost::log::attributes::current_thread_id::value_type >("ThreadID")
			//% expr::smessage
			//);

    //https://github.com/cuipf0823/boost_log
    //https://github.com/kiddnoke/boost_log/blob/master/log.cpp
    //https://github.com/chikuta/boost_logger_sample/blob/master/logger.cpp
    //https://github.com/gaolj/LogTest
    //https://blog.csdn.net/rankun1/article/details/53261162
	typedef sinks::synchronous_sink<sinks::text_file_backend> TextSink;

	boost::shared_ptr<sinks::text_file_backend> backend = boost::make_shared<sinks::text_file_backend>(
			keywords::file_name = "sign_%Y-%m-%d_%H-%M-%S.%N.log",
			keywords::rotation_size = 1 * 1024 * 1024,
			keywords::time_based_rotation = sinks::file::rotation_at_time_point(0, 0, 0),
			keywords::min_free_space = 30 * 1024 * 1024);

    //template< typename ArgsT >
    //void construct(ArgsT const& args)
    //{
        //construct(
            //filesystem::path(args[keywords::file_name | filesystem::path()]),
            //args[keywords::open_mode | (std::ios_base::trunc | std::ios_base::out)],
            //args[keywords::rotation_size | (std::numeric_limits< uintmax_t >::max)()],
            //args[keywords::time_based_rotation | time_based_rotation_predicate()],
            //args[keywords::auto_flush | false]);
    //}


	boost::shared_ptr<TextSink> sink(new TextSink(backend));
	sink->set_formatter(
			exprs::format("[%1%]<%2%>(%3%): %4%")
			% exprs::format_date_time< boost::posix_time::ptime >("TimeStamp", "%Y-%m-%d %H:%M:%S")
			% exprs::attr<logging::trivial::severity_level>("Severity")
			% exprs::attr<attrs::current_thread_id::value_type >("ThreadID")
			% exprs::smessage
			);

	sink->set_filter(logging::trivial::severity >= level);
}
